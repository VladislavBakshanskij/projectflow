plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id "io.freefair.lombok" version '6.3.0'
    id 'java'
}

group = 'io.amtech'
sourceCompatibility = JavaVersion.VERSION_11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.apache.commons:commons-lang3'
    implementation 'commons-collections:commons-collections:3.2.2'

    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.jooq:jooq-codegen'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:postgresql'
}

project.ext.set("postgres", "postgres")
project.ext.set("liquibase", "liquibase")

task startDbContainer(type: Exec) {
    doFirst {
        stopContainers()
    }
    commandLine "docker", "run",
            "--name", "${project.postgres}",
            "--rm", "-dp", "5432:5432",
            "-e", "POSTGRES_DB=projectflow",
            "-e", "POSTGRES_PASSWORD=pass",
            "postgres:alpine"
}

task startLiquibaseMigrationInContainer(type: Exec, dependsOn: [startDbContainer]) {
    commandLine "docker", "run",
            "--name", "${project.liquibase}",
            "--link", "${project.postgres}:postgres",
            "--rm", "-v", "${file("src/main/resources/db/changelog").absolutePath}:/liquibase/changelog",
            "liquibase/liquibase", "update", "--changelog-file", "master-changelog.xml",
            "--url", "jdbc:postgresql://postgres:5432/projectflow",
            "--username", "postgres",
            "--password", "pass"
}

task gen(type: Exec, dependsOn: [startLiquibaseMigrationInContainer]) {
    commandLine "java", "-cp", sourceSets.main.runtimeClasspath.getAsPath(),
            "org.jooq.codegen.GenerationTool", "src/main/resources/db/codegen.xml"
}

sourceSets.main.java.srcDirs = [
        'src/generated/java',
        'src/main/java'
]

def stopContainers() {
    try {
        [project.postgres, project.liquibase].each {
            logger.quiet("Try stop runned docker containers: ${"docker stop $it".execute().text}")
        }
    } catch (Exception e) {
        logger.log(LogLevel.ERROR, "Error on stop containers", e)
    }
}

jar {
    enabled = false
}

test {
    useJUnitPlatform()
}
