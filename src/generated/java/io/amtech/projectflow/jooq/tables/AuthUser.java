/*
 * This file is generated by jOOQ.
 */
package io.amtech.projectflow.jooq.tables;


import io.amtech.projectflow.jooq.Pf;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthUser extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pf.auth_user</code>
     */
    public static final AuthUser AUTH_USER = new AuthUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pf.auth_user.employee_id</code>.
     */
    public final TableField<Record, UUID> EMPLOYEE_ID = createField(DSL.name("employee_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>pf.auth_user.login</code>.
     */
    public final TableField<Record, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>pf.auth_user.password</code>.
     */
    public final TableField<Record, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>pf.auth_user.is_locked</code>.
     */
    public final TableField<Record, Boolean> IS_LOCKED = createField(DSL.name("is_locked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private AuthUser(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private AuthUser(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pf.auth_user</code> table reference
     */
    public AuthUser(String alias) {
        this(DSL.name(alias), AUTH_USER);
    }

    /**
     * Create an aliased <code>pf.auth_user</code> table reference
     */
    public AuthUser(Name alias) {
        this(alias, AUTH_USER);
    }

    /**
     * Create a <code>pf.auth_user</code> table reference
     */
    public AuthUser() {
        this(DSL.name("auth_user"), null);
    }

    @Override
    public Schema getSchema() {
        return Pf.PF;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(AuthUser.AUTH_USER, DSL.name("auth_user_pkey"), new TableField[] { AuthUser.AUTH_USER.EMPLOYEE_ID }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(AuthUser.AUTH_USER, DSL.name("auth_user_pkey"), new TableField[] { AuthUser.AUTH_USER.EMPLOYEE_ID }, true)
        );
    }

    @Override
    public AuthUser as(String alias) {
        return new AuthUser(DSL.name(alias), this);
    }

    @Override
    public AuthUser as(Name alias) {
        return new AuthUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(String name) {
        return new AuthUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthUser rename(Name name) {
        return new AuthUser(name, null);
    }
}
