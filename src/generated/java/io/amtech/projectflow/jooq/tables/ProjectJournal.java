/*
 * This file is generated by jOOQ.
 */
package io.amtech.projectflow.jooq.tables;


import io.amtech.projectflow.jooq.Keys;
import io.amtech.projectflow.jooq.Pf;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectJournal extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pf.project_journal</code>
     */
    public static final ProjectJournal PROJECT_JOURNAL = new ProjectJournal();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>pf.project_journal.id</code>.
     */
    public final TableField<Record, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>pf.project_journal.project_id</code>.
     */
    public final TableField<Record, UUID> PROJECT_ID = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>pf.project_journal.login</code>.
     */
    public final TableField<Record, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>pf.project_journal.update_date</code>.
     */
    public final TableField<Record, OffsetDateTime> UPDATE_DATE = createField(DSL.name("update_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>pf.project_journal.current_state</code>.
     */
    public final TableField<Record, JSONB> CURRENT_STATE = createField(DSL.name("current_state"), SQLDataType.JSONB.nullable(false), this, "");

    private ProjectJournal(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private ProjectJournal(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pf.project_journal</code> table reference
     */
    public ProjectJournal(String alias) {
        this(DSL.name(alias), PROJECT_JOURNAL);
    }

    /**
     * Create an aliased <code>pf.project_journal</code> table reference
     */
    public ProjectJournal(Name alias) {
        this(alias, PROJECT_JOURNAL);
    }

    /**
     * Create a <code>pf.project_journal</code> table reference
     */
    public ProjectJournal() {
        this(DSL.name("project_journal"), null);
    }

    public <O extends Record> ProjectJournal(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, PROJECT_JOURNAL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Pf.PF;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.PROJECT_JOURNAL_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT_JOURNAL__PROJECT_JOURNAL_HAS_PROJECT_FK);
    }

    private transient Project _project;

    public Project project() {
        if (_project == null)
            _project = new Project(this, Keys.PROJECT_JOURNAL__PROJECT_JOURNAL_HAS_PROJECT_FK);

        return _project;
    }

    @Override
    public ProjectJournal as(String alias) {
        return new ProjectJournal(DSL.name(alias), this);
    }

    @Override
    public ProjectJournal as(Name alias) {
        return new ProjectJournal(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectJournal rename(String name) {
        return new ProjectJournal(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectJournal rename(Name name) {
        return new ProjectJournal(name, null);
    }
}
