/*
 * This file is generated by jOOQ.
 */
package io.amtech.projectflow.jooq;


import io.amtech.projectflow.jooq.tables.AuthUser;
import io.amtech.projectflow.jooq.tables.Direction;
import io.amtech.projectflow.jooq.tables.Employee;
import io.amtech.projectflow.jooq.tables.Milestone;
import io.amtech.projectflow.jooq.tables.Notification;
import io.amtech.projectflow.jooq.tables.NotificationHistory;
import io.amtech.projectflow.jooq.tables.Project;
import io.amtech.projectflow.jooq.tables.ProjectComment;
import io.amtech.projectflow.jooq.tables.ProjectJournal;

import org.jooq.ForeignKey;
import org.jooq.Record;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in pf.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<Record> AUTH_USER_PKEY = Internal.createUniqueKey(AuthUser.AUTH_USER, DSL.name("auth_user_pkey"), new TableField[] { AuthUser.AUTH_USER.EMPLOYEE_ID }, true);
    public static final UniqueKey<Record> DIRECTION_PKEY = Internal.createUniqueKey(Direction.DIRECTION, DSL.name("direction_pkey"), new TableField[] { Direction.DIRECTION.ID }, true);
    public static final UniqueKey<Record> EMPLOYEE_PKEY = Internal.createUniqueKey(Employee.EMPLOYEE, DSL.name("employee_pkey"), new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final UniqueKey<Record> MILESTONE_PKEY = Internal.createUniqueKey(Milestone.MILESTONE, DSL.name("milestone_pkey"), new TableField[] { Milestone.MILESTONE.ID }, true);
    public static final UniqueKey<Record> NOTIFICATION_PKEY = Internal.createUniqueKey(Notification.NOTIFICATION, DSL.name("notification_pkey"), new TableField[] { Notification.NOTIFICATION.ID }, true);
    public static final UniqueKey<Record> NOTIFICATION_HISTORY_PKEY = Internal.createUniqueKey(NotificationHistory.NOTIFICATION_HISTORY, DSL.name("notification_history_pkey"), new TableField[] { NotificationHistory.NOTIFICATION_HISTORY.ID }, true);
    public static final UniqueKey<Record> PROJECT_PKEY = Internal.createUniqueKey(Project.PROJECT, DSL.name("project_pkey"), new TableField[] { Project.PROJECT.ID }, true);
    public static final UniqueKey<Record> PROJECT_COMMENT_PKEY = Internal.createUniqueKey(ProjectComment.PROJECT_COMMENT, DSL.name("project_comment_pkey"), new TableField[] { ProjectComment.PROJECT_COMMENT.ID }, true);
    public static final UniqueKey<Record> PROJECT_JOURNAL_PKEY = Internal.createUniqueKey(ProjectJournal.PROJECT_JOURNAL, DSL.name("project_journal_pkey"), new TableField[] { ProjectJournal.PROJECT_JOURNAL.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<Record, Record> AUTH_USER__AUTH_USER_HAS_EMPLOYEE_FK = Internal.createForeignKey(AuthUser.AUTH_USER, DSL.name("auth_user_has_employee_fk"), new TableField[] { AuthUser.AUTH_USER.EMPLOYEE_ID }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final ForeignKey<Record, Record> DIRECTION__DIRECTION_HAS_LEAD_FK = Internal.createForeignKey(Direction.DIRECTION, DSL.name("direction_has_lead_fk"), new TableField[] { Direction.DIRECTION.LEAD_ID }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final ForeignKey<Record, Record> MILESTONE__MILESTONE_HAS_PROJECT_FK = Internal.createForeignKey(Milestone.MILESTONE, DSL.name("milestone_has_project_fk"), new TableField[] { Milestone.MILESTONE.PROJECT_ID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.ID }, true);
    public static final ForeignKey<Record, Record> NOTIFICATION_HISTORY__NOTIFICATION_HISTORY_HAS_NOTIFICATION_FK = Internal.createForeignKey(NotificationHistory.NOTIFICATION_HISTORY, DSL.name("notification_history_has_notification_fk"), new TableField[] { NotificationHistory.NOTIFICATION_HISTORY.NOTIFICATION_ID }, Keys.NOTIFICATION_PKEY, new TableField[] { Notification.NOTIFICATION.ID }, true);
    public static final ForeignKey<Record, Record> PROJECT__PROJECT_HAS_DIRECTION_FK = Internal.createForeignKey(Project.PROJECT, DSL.name("project_has_direction_fk"), new TableField[] { Project.PROJECT.DIRECTION_ID }, Keys.DIRECTION_PKEY, new TableField[] { Direction.DIRECTION.ID }, true);
    public static final ForeignKey<Record, Record> PROJECT__PROJECT_HAS_PROJECT_LEAD_FK = Internal.createForeignKey(Project.PROJECT, DSL.name("project_has_project_lead_fk"), new TableField[] { Project.PROJECT.PROJECT_LEAD_ID }, Keys.EMPLOYEE_PKEY, new TableField[] { Employee.EMPLOYEE.ID }, true);
    public static final ForeignKey<Record, Record> PROJECT_COMMENT__PROJECT_COMMENT_HAS_PROJECT_FK = Internal.createForeignKey(ProjectComment.PROJECT_COMMENT, DSL.name("project_comment_has_project_fk"), new TableField[] { ProjectComment.PROJECT_COMMENT.PROJECT_ID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.ID }, true);
    public static final ForeignKey<Record, Record> PROJECT_JOURNAL__PROJECT_JOURNAL_HAS_PROJECT_FK = Internal.createForeignKey(ProjectJournal.PROJECT_JOURNAL, DSL.name("project_journal_has_project_fk"), new TableField[] { ProjectJournal.PROJECT_JOURNAL.PROJECT_ID }, Keys.PROJECT_PKEY, new TableField[] { Project.PROJECT.ID }, true);
}
